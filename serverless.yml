# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-step-functions

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10

# you can overwrite defaults here
#  stage: dev
  region: us-east-1
  environment:
    CALC_ACTIVITY_ARN: ${self:custom.CALC_ACTIVITY_ARN}
    STATEMACHINE_SAMPLE_ORCH_ARN: ${self:custom.STATEMACHINE_SAMPLE_ORCH_ARN}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
custom:
  CALC_ACTIVITY_ARN: arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:activity:doCalculation
  STATEMACHINE_SAMPLE_ORCH_NAME: SampleOrchestration
  STATEMACHINE_SAMPLE_ORCH_ARN: arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:${self:custom.STATEMACHINE_SAMPLE_ORCH_NAME}
functions:
  configureFlow:
    handler: handler.configureFlow
  activityWatcher:
    handler: handler.activityWatcher
    events:
      - sns: calcCompleted
  initiateCalc:
    handler: handler.initiateCalc
  invokeStateMachines:
    handler: handler.invokeStateMachines

stepFunctions:
  stateMachines:
    hellostepfunc1:
      name: ${self:custom.STATEMACHINE_SAMPLE_ORCH_NAME}
      definition:
        Comment: "Sample Flow exploring possibilities"
        StartAt: ConfigureRun
        States:
          ConfigureRun:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-configureFlow"
            Next: DoCalc
          DoCalc:
            Type: Parallel
            Next: Final
            Branches:
            - StartAt: InitiateCalc
              States:
                InitiateCalc:
                  Type: Task
                  Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-initiateCalc"
                  End: true
            - StartAt: CalcWaitActivity
              States:
                CalcWaitActivity:
                  Type: Task
                  Resource: ${self:custom.CALC_ACTIVITY_ARN}
                  End: true
          Final:
            Type: Pass
            End: true
  activities :
    - doCalculation

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    CalcCompletedTopic:
#      Type: AWS::SNS::Topic
#      Properties:
#        TopicName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
